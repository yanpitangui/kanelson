@page "/question/{Id:guid?}"
@using global::Kanelson.Contracts.Models
@using Kanelson.Services
@using Severity = MudBlazor.Severity
@inject IQuestionService _service
@inject NavigationManager Navigation
@inject ISnackbar snackBar
@inject IStringLocalizer<Shared> Loc


<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Incluir/Editar perguntas</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <EditForm Model="@_question" OnValidSubmit="SaveQuestion">
                    <ObjectGraphDataAnnotationsValidator />
                    <MudCardContent>
                        <MudTextField @bind-Value="_question.Name"
                                      For="@(() => _question.Name)"
                                      Immediate="true"
                                      Label="@Loc["Name"]"/>

                        <MudSelect Immediate="@true"
                                   T="int" Required="true" For="@(() => _question.TimeLimit)"
                                   Placeholder="@Loc["Select"]" @bind-Value="_question.TimeLimit"
                                   Label="@Loc["TimeToAnswer"]"
                                   Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var tempo in _tempos)
                            {
                                <MudSelectItem T="int" Value="@tempo">@tempo seg.</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect Immediate="@true" T="QuestionType" For="@(() => _question.Type)"
                                   ValueExpression="@(() => _question.Type)" Value="_question.Type"
                                   ValueChanged="@((QuestionType value) => SelectedValueChange(value))"
                                   Required="true" Placeholder="@Loc["Select"]" Label="@Loc["Type"]"
                                   Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            @foreach (QuestionType item in Enum.GetValues<QuestionType>())
                            {
                                <MudSelectItem Value="@item">@Loc[$"QuestionType_{item.ToString()}"]</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect Immediate="@true" T="int" For="@(() => _question.Points)" Required="true"
                                   Placeholder="@Loc["Select"]" @bind-Value="_question.Points" Label="@Loc["Points"]"
                                   Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            <MudSelectItem Value="0">0 pts</MudSelectItem>
                            <MudSelectItem Value="1000">1000 pts</MudSelectItem>
                            <MudSelectItem Value="2000">2000 pts</MudSelectItem>
                        </MudSelect>
                    </MudCardContent>
                    <MudCardContent Class="pa-0">
                        <MudTable Context="answerContext" Items="@_question.Answers" Comparer="_comparer" Hover="true" Breakpoint="Breakpoint.None" Dense="@true" Elevation="0">
                            <HeaderContent>
                                <MudTh>@Loc["Answers"]</MudTh>
                                <MudTh>
                                    <MudFab @onclick="AddAnswer" Disabled="_question.Type == QuestionType.TrueFalse"
                                            Color="Color.Secondary" Icon="@Icons.Material.Filled.Add"
                                            Size="Size.Small" IconSize="Size.Small"/></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="AnswerDescription">
                                    <MudTextField Label="@Loc["AnswerDescription"]" Immediate="@true"
                                                  Disabled="_question.Type == QuestionType.TrueFalse"
                                                  @bind-Value="@answerContext.Description"
                                                  For="@(() => answerContext.Description)"/>

                                </MudTd>
                                <MudTd DataLabel="Correct">
                                    <MudCheckBox @bind-Checked="@answerContext.Correct" @bind-Value="@answerContext.Correct"
                                                 For="@(() => answerContext.Correct)"
                                                 Label="@Loc["Correct"]" Color="Color.Primary"></MudCheckBox>

                                </MudTd>
                                <MudTd DataLabel="Delete">
                                    <MudFab @onclick="@(() => DeleteAnswer(@answerContext))"
                                            Disabled="_question.Type == QuestionType.TrueFalse"
                                            Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete"
                                            Size="Size.Small" IconSize="Size.Small"/>

                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                   Class="ml-auto">
                            @Loc["Save"]
                        </MudButton>
                    </MudCardActions>
                </EditForm>
            </MudPaper>
        </MudItem>
    </MudGrid>

</MudCard>


@code {

    [Parameter]
    public Guid? Id { get; set; }

    private Question _question = new();
    
    private AnswerComparer _comparer = new();

    private static int[] _tempos = new[] {5, 10, 20, 30, 60, 90, 120, 240};
    
    internal void SelectedValueChange(QuestionType value)
    {
        _question.Type = value;

        if (value == QuestionType.TrueFalse)
        {
            _question.Answers.Clear();
            ReseedAnswers();
        }
    }

    private void ReseedAnswers()
    {
        _question.Answers.Add(new Answer
        {
            Description = Loc["True"],
            Correct = true
        });

        _question.Answers.Add(new Answer
        {
            Description = Loc["False"],
            Correct = false
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (Id is null)
            {
                _question = new Question();
                ReseedAnswers();
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                try
                {
                    _question = await _service.GetQuestion(Id!.Value);
                    await InvokeAsync(StateHasChanged);
                }
                catch (Exception)
                {
                    snackBar.Add(Loc["QuestionNotFound"], Severity.Error, config =>
                    {
                        config.CloseAfterNavigation = false;
                        config.RequireInteraction = false;
                    });
                    Navigation.NavigateTo("questions");
                }
            }
        }
    }

    private async Task SaveQuestion()
    {
        await _service.SaveQuestion(_question!);
        snackBar.Add(Loc["QuestionSavedSuccess"], Severity.Success);
        Navigation.NavigateTo("questions");
    }

    private void DeleteAnswer(Answer answer)
    {
        _question.Answers.Remove(answer);
    }

    private void AddAnswer()
    {
        _question.Answers.Add(new Answer());
    }



}