@page "/template/{Id:guid?}"
@using Kanelson.Services
@using Microsoft.AspNetCore.Components
@using global::Kanelson.Contracts.Models
@using MudBlazor.Utilities
@inject ITemplateService Service
@inject NavigationManager Navigation
@inject ISnackbar SnackBar
@inject IQuestionService QuestionService;
@inject IStringLocalizer<Shared> Loc

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Incluir/Editar templates</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <EditForm Model="@_template" OnValidSubmit="SaveTemplate">
                    <ObjectGraphDataAnnotationsValidator />
                    <MudCardContent>
                        <MudTextField @bind-Value="_template.Name"
                                      For="@(() => _template.Name)"
                                      Immediate="true"
                                      Label="@Loc["Name"]"/>
                        <MudDropContainer Items="_items" T="TemplateQuestionDrop" Context="templateContext"
                                          ItemsSelector="@((item, dropzone) => item.Selector == dropzone)"
                                          ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
                            <ChildContent>
                                <MudDropZone T="TemplateQuestionDrop" Identifier="1" item Class="rounded border-1 mud-border-lines-default pa-6 ma-8 flex-grow-1">
                                    <MudText Typo="Typo.h6" Class="mb-4">@Loc["AvailableQuestions"]</MudText>
                                </MudDropZone>
                                <MudDropZone T="TemplateQuestionDrop" Identifier="2"
                                             AllowReorder="true"
                                             Class="rounded border-1 mud-border-lines-default pa-6 ma-8 flex-grow-1">
                                    <MudText Typo="Typo.h6" Class="mb-4">@Loc["AssignedQuestions"]</MudText>
                                </MudDropZone>
                            </ChildContent>
                            <ItemRenderer>
                                <MudListItem Class="mud-elevation-25 rounded" Text="@templateContext.Name"/>
                            </ItemRenderer>
                        </MudDropContainer>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                   Class="ml-auto">
                            @Loc["Save"]
                        </MudButton>
                    </MudCardActions>
                </EditForm>
            </MudPaper>
        </MudItem>
    </MudGrid>

</MudCard>


@code {
    [Parameter]
    public Guid? Id { get; set; }
    
    private Template _template = new();

    private List<TemplateQuestionDrop> _items = new();

    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (Id is null)
            {
                _template = new Template();
            }
            else
            {
                try
                {
                    _template = await Service.GetTemplate(Id!.Value);
                }        catch (Exception)
                {
                    SnackBar.Add(Loc["TemplateNotFound"], Severity.Error, config =>
                    {
                        config.CloseAfterNavigation = false;
                        config.RequireInteraction = false;
                        config.ShowCloseIcon = false;
                    });
                    Navigation.NavigateTo("templates");
                }

            }
            var items = (await QuestionService.GetQuestionsSummary())
                .Select(x => new TemplateQuestionDrop
                {
                    Id = x.Id,
                    Name = x.Name,
                }).ToList();
                
            foreach (var item in items.Where(x =>
                _template.Questions.Select(static y => y.Id).Contains(x.Id)))
            {
                item.Selector = "2";
                item.Order = _template.Questions.Where(x => x.Id == item.Id)
                    .Select(x => x.Order).First();
            }
            _items.AddRange(items.OrderBy(x => x.Order));
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private void ItemUpdated(MudItemDropInfo<TemplateQuestionDrop> dropItem)
    {

        
        dropItem.Item.Selector = dropItem.DropzoneIdentifier;
        
        // Como essa mágica funciona??
        var indexOffset = dropItem.DropzoneIdentifier switch
        {
            "2"  => _items.Count(x => x.Selector == "1"),
            _ => 0,
            };

        _items.UpdateOrder(dropItem, item => item.Order, indexOffset);

    }
    
    private async Task SaveTemplate()
    {
        var availableQuestions = await QuestionService.GetQuestions(_items
            .Where(x => x.Selector == "2").Select(x => x.Id).ToHashSet());

        _template.Questions = availableQuestions
            .Join(_items, original => original.Id, changed => changed.Id, (question, drop) =>
            
                new TemplateQuestion
                {
                    Id = question.Id,
                    Answers = new List<Answer>(question.Answers),
                    Name = question.Name,
                    Order = drop.Order,
                    Points = question.Points,
                    Type = question.Type,
                    TimeLimit = question.TimeLimit
                }
            )
            .OrderBy(x => x.Order)
            .ToList();
        await Service.UpsertTemplate(_template!);
        SnackBar.Add(Loc["TemplateSavedSuccess"], Severity.Success);
        Navigation.NavigateTo("templates");
        
    }

    public record TemplateQuestionDrop : QuestionSummary
    {
        public string Selector { get; set; } = "1";
        public int Order { get; set; }
    }

}