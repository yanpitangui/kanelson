@page "/rooms"
@using Kanelson.Services
@using System.Collections.Immutable
@using Kanelson.Actors.Rooms
@using Kanelson.Components.CardRoom
@using Kanelson.Hubs
@using Kanelson.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject IRoomService Service
@inject IUserService UserService
@inject NavigationManager Navigation
@inject IStringLocalizer<Shared> Loc
@inject IHttpContextAccessor HttpAccessor
@inherits ComponentBase
@implements IAsyncDisposable

@if (_rooms is null)
{
    <MudContainer class="empty-rooms">
        <h2>@Loc["Ainda não existem salas abertas"]...</h2>
        <MudButton class="empty-rooms__btn-sala">@Loc["Criar sala"]</MudButton>
    </MudContainer>
}
else
{
    <MudText Style="text-transform: uppercase" Typo="Typo.h4">@Loc["Rooms"]</MudText>
    <div style="display: flex; gap: 20px; margin-top: 20px; flex-wrap: wrap">
        @foreach (var room in _rooms)
        {
            <CardRoomComponent
                Id="@room.Id"
                RoomName="@room.Name"
                HostId="@room.OwnerId"
                RoomOwner="@(UserService.CurrentUser == room.OwnerId)"
                EnterRoomClick="@(() => JoinRoom(room.Id))"
                DeleteRoomClick="@(() => DeleteRoom(room.Id))">
            </CardRoomComponent>
        }
    </div>

}

@code {

    private ImmutableArray<BasicRoomInfo>? _rooms;
    private HubConnection _hubConnection = null!;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = HttpAccessor.GetConnection(Navigation, "roomLobbyHub");


        _hubConnection.On<ImmutableArray<BasicRoomInfo>>(RoomLobbyHub.SignalRMessages.RoomsChanged, (rooms) =>
        {
            _rooms = rooms;
            InvokeAsync(StateHasChanged);
        });

        _rooms = await Service.GetAll();
        await _hubConnection.StartAsync();
    }

    private void JoinRoom(string id)
    { 
        Navigation.NavigateTo($"/room/{id}");
    }

    private async Task DeleteRoom(string id)
    {
        await Service.Delete(id);
        await InvokeAsync(StateHasChanged);
    }


    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is IAsyncDisposable disposable)
        {
            await disposable.DisposeAsync();
        }
    }

}