@page "/game/{Id:guid?}"
@using Kanelson.Services
@using Microsoft.AspNetCore.Components
@using global::Shared.Models
@using System.Collections.Immutable
@using MudBlazor.Utilities
@inject IGameService _service
@inject NavigationManager Navigation
@inject ISnackbar snackBar
@inject IQuestionService _questionService;

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Incluir/Editar perguntas</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudForm @ref="@form" @bind-IsValid="@valid" Model="@_game"
                         ValidationDelay="0">
                    <MudCardContent>
                        <MudTextField @bind-Value="_game.Name"
                                      For="@(() => _game.Name)"
                                      Immediate="true"
                                      Label="Nome"/>
                        <MudDropContainer Items="_items"  T="GameQuestionDrop"
                                          ItemsSelector="@((item,dropzone) => item.Selector == dropzone)"
                                          ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
                            <ChildContent>
                                <MudDropZone T="GameQuestionDrop" Identifier="1" item Class="rounded border-1 mud-border-lines-default pa-6 ma-8 flex-grow-1">
                                    <MudText Typo="Typo.h6" Class="mb-4">Perguntas disponíveis</MudText>
                                 </MudDropZone>
                                <MudDropZone T="GameQuestionDrop" Identifier="2"
                                             AllowReorder="true"
                                             Class="rounded border-1 mud-border-lines-default pa-6 ma-8 flex-grow-1">
                                    <MudText Typo="Typo.h6" Class="mb-4">Perguntas atribuidas</MudText>
                                </MudDropZone>
                            </ChildContent>
                            <ItemRenderer>
                                <MudListItem Class="mud-elevation-25 rounded" Text="@context.Name" />
                            </ItemRenderer>
                        </MudDropContainer>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveGame"
                                   Class="ml-auto">
                            Salvar
                        </MudButton>
                    </MudCardActions>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>

</MudCard>


@code {
    [Parameter]
    public Guid? Id { get; set; }
    
    MudForm form;
    
    private Game _game = new();
    bool valid;

    private List<GameQuestionDrop> _items = new();

    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (Id is null)
            {
                _game = new Game();
            }
            else
            {
                _game = await _service.GetGame(Id!.Value);

            }
            var items = (await _questionService.GetQuestionsSummary())
                .Select(x => new GameQuestionDrop
                {
                    Id = x.Id,
                    Name = x.Name,
                }).ToList();
                
            foreach (var item in items.Where(x =>
                _game.Questions.Select(static y => y.Id).Contains(x.Id)))
            {
                item.Selector = "2";
                item.Order = _game.Questions.Where(x => x.Id == item.Id)
                    .Select(x => x.Order).First();
            }
            _items.AddRange(items.OrderBy(x => x.Order));
            StateHasChanged();
        }
    }
    
    private void ItemUpdated(MudItemDropInfo<GameQuestionDrop> dropItem)
    {

        
        dropItem.Item.Selector = dropItem.DropzoneIdentifier;
        
        // Como essa mágica funciona??
        var indexOffset = dropItem.DropzoneIdentifier switch
        {
            "2"  => _items.Count(x => x.Selector == "1"),
            _ => 0,
            };

        _items.UpdateOrder(dropItem, item => item.Order, indexOffset);

    }
    
    private async Task SaveGame()
    {
        await form.Validate();

        if (form.IsValid)
        {
            var availableQuestions = await _questionService.GetQuestions(_items
                .Where(x => x.Selector == "2").Select(x => x.Id).ToHashSet());

            _game.Questions = availableQuestions
                .Join(_items, original => original.Id, changed => changed.Id, (question, drop) =>
                
                    new GameQuestion
                    {
                        Id = question.Id,
                        Answers = question.Answers,
                        Name = question.Name,
                        Order = drop.Order,
                        Points = question.Points,
                        Type = question.Type,
                        TimeLimit = question.TimeLimit
                    }
                )
                .OrderBy(x => x.Order)
                .ToImmutableArray();
            await _service.UpsertGame(_game!);
            snackBar.Add("Partida salva com sucesso.", Severity.Success);
            Navigation.NavigateTo("games", forceLoad:true);
        }
    }

    public record GameQuestionDrop : QuestionSummary
    {
        public string Selector { get; set; } = "1";
        public int Order { get; set; }
    }

}