@page "/rooms"
@using Kanelson.Services
@using global::Kanelson.Contracts.Models
@using System.Collections.Immutable
@inject IRoomService Service
@inject IUserService UserService
@inject NavigationManager Navigation
@inject IStringLocalizer<Shared> Loc


@if (_rooms is null)
{
    <h2>@Loc["Loading"]...</h2>
}
else
{
    <MudCard>
        <MudTable Elevation="25" Items="_rooms" T="RoomSummary" >
         <ToolBarContent>
             <MudText Typo="Typo.h6">@Loc["Rooms"]</MudText>
         </ToolBarContent>
            <HeaderContent>
                <MudTh>@Loc["Join"]</MudTh>
                <MudTh>@Loc["Id"]</MudTh>
                <MudTh>@Loc["Name"]</MudTh>
                <MudTh>@Loc["Host"]</MudTh>
                <MudTh>@Loc["Actions"]</MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd>
                   <MudFab @onclick="@(() => JoinRoom(context.Id))"
                        Color="Color.Info" Icon="@Icons.Material.Filled.Outbound"
                        Size="Size.Small" IconSize="Size.Small"/>
                </MudTd>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Host">
                    <Avatar GithubId="@context.Owner.Id"/>
                </MudTd>
                <MudTd>
                    <MudFab @onclick="@(() => DeleteRoom(@context.Id))" Color="Color.Secondary"
                            Disabled="@(UserService.CurrentUser != context.Owner.Id)"
                            Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"/>
                </MudTd>

            </RowTemplate>
     </MudTable>
    </MudCard>


}


@code {

    private ImmutableArray<RoomSummary>? _rooms;

    protected override async Task OnInitializedAsync()
    {
        _rooms = await Service.GetAll();
        await base.OnInitializedAsync();
    }

    private void JoinRoom(long id)
    { 
        Navigation.NavigateTo($"/room/{id}");
    }

    private async Task DeleteRoom(long id)
    {
        await Service.Delete(id);
        _rooms = await Service.GetAll();
        await InvokeAsync(StateHasChanged);
    }
    
}