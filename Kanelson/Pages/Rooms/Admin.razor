@using Microsoft.AspNetCore.SignalR.Client
@using global::Kanelson.Contracts.Models
@using System.Collections.Immutable
@using Kanelson.Grains.Rooms
@using Kanelson.Services
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpAccessor
@inject IRoomService RoomService
@inject IStringLocalizer<Shared> Loc
<h3>Admin</h3>
<MudList>
    
    @foreach (var user in _connectedUsers)
    {
        <MudListItem>
            <Avatar GithubId="@user.Id"/>  <span>@user.Name</span>
        </MudListItem>
    }
</MudList>



@if (_currentQuestion is not null)
{
    <MudCard>
        <MudCardHeader>
            @_currentQuestion.Name
        </MudCardHeader>
        <MudCardContent>
            <MudList>
                @foreach (var answer in _currentQuestion.Answers)
                {
                    <MudListItem>
                       @answer.Description
                    </MudListItem>
                    <MudDivider />
                }
            </MudList>
        </MudCardContent>
    </MudCard>
}

@if (_roomStateMachine != null)
{
    @if (_roomStateMachine.PermittedTriggers.Contains(RoomTrigger.Start))
    {
        <MudButton @onclick="@(() => Start())" Color="Color.Primary" 
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Filled.Start">@Loc["StartButton"]</MudButton>
    }
    

    @if (_roomStateMachine.PermittedTriggers.Contains(RoomTrigger.DisplayQuestion))
    {
        <MudButton @onclick="@(() => NextQuestion())" Color="Color.Primary" 
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Filled.SkipNext">@Loc["NextQuestionButton"]</MudButton>
    }
}




@code {
    private HubConnection _hubConnection = null!;
    private IEnumerable<UserInfo> _connectedUsers = ImmutableArray<UserInfo>.Empty;
    TemplateQuestion? _currentQuestion;
    private RoomStateMachine _roomStateMachine;

    [Parameter]
    public string RoomId { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        _hubConnection = HttpAccessor.GetConnection(Navigation);

        _hubConnection.On<RoomStatus>("RoomStateChanged", (state) =>
        {
            _roomStateMachine = RoomBehavior.GetStateMachine(state);
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<HashSet<UserInfo>>("CurrentUsersUpdated", (users) =>
        {
            _connectedUsers = users.ToImmutableArray();
            InvokeAsync(StateHasChanged);
        });
        
        _hubConnection.On<TemplateQuestion>("NextQuestion", (question) =>
        {
            _currentQuestion = question;
            InvokeAsync(StateHasChanged);
        });

        var currentState = await RoomService.GetCurrentState(RoomId);
        _roomStateMachine = RoomBehavior.GetStateMachine(currentState);

        await _hubConnection.StartAsync();
        _connectedUsers = await RoomService.GetCurrentUsers(RoomId);
        await InvokeAsync(StateHasChanged);

        await base.OnParametersSetAsync();
    }

    protected async Task Start()
    {
        await _hubConnection.SendAsync("Start", RoomId);
    }

    protected async Task NextQuestion()
    {
        await RoomService.NextQuestion(RoomId);
    }

}