@using Microsoft.AspNetCore.SignalR.Client
@using global::Kanelson.Contracts.Models
@using System.Collections.Immutable
@using Kanelson.Actors.Rooms
@using Kanelson.Hubs
@using Kanelson.Services
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpAccessor
@inject IRoomService RoomService
@inject IStringLocalizer<Shared> Loc
<h3>Admin</h3>
<MudList>
    
    @foreach (var user in _connectedUsers)
    {
        <MudListItem>
            <Avatar GithubId="@user.Id"/>  <span>@user.Name</span>
        </MudListItem>
    }
</MudList>



@if (_roomStateMachine != null)
{
    
    @if (_currentQuestion is not null && !_roomStateMachine.IsInState(RoomStatus.Created))
    {
        <QuestionComponent Question="_currentQuestion"/>
    }

    
    @if (_roomStateMachine.PermittedTriggers.Contains(RoomTrigger.Start))
    {
        <MudButton @onclick="Start" Color="Color.Primary" 
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Start">@Loc["StartButton"]</MudButton>
    }
    

    @if (_roomStateMachine.PermittedTriggers.Contains(RoomTrigger.DisplayQuestion) && !_roomStateMachine.IsInState(RoomStatus.Finished))
    {
        <MudButton @onclick="NextQuestion" Color="Color.Primary" 
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.SkipNext">@Loc["NextQuestionButton"]</MudButton>
    }
}




@code {
    private HubConnection _hubConnection = null!;
    private IEnumerable<UserInfo> _connectedUsers = ImmutableArray<UserInfo>.Empty;
    TemplateQuestion? _currentQuestion;
    private RoomStateMachine _roomStateMachine = null!;

    
    [Parameter]
    public long RoomId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _hubConnection = HttpAccessor.GetConnection(Navigation);

        _hubConnection.On<RoomStatus>(SignalRMessages.RoomStatusChanged, (state) =>
        {
            _roomStateMachine = RoomBehavior.GetStateMachine(state);
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<HashSet<UserInfo>>(SignalRMessages.CurrentUsersUpdated, (users) =>
        {
            _connectedUsers = users.ToImmutableArray();
            InvokeAsync(StateHasChanged);
        });
        
        _hubConnection.On<TemplateQuestion>(SignalRMessages.NextQuestion, async (question) =>
        {
            _currentQuestion = question;
            await InvokeAsync(StateHasChanged);

        });

        var currentState = await RoomService.GetCurrentState(RoomId);
        _roomStateMachine = RoomBehavior.GetStateMachine(currentState);

        await _hubConnection.StartAsync();
        _connectedUsers = await RoomService.GetCurrentUsers(RoomId);

        _currentQuestion = await RoomService.GetCurrentQuestion(RoomId);

        await InvokeAsync(StateHasChanged);

        await base.OnParametersSetAsync();
    }

    protected async Task Start()
    {
        await _hubConnection.SendAsync(SignalRMessages.Start, RoomId);
    }

    protected async Task NextQuestion()
    {
        await RoomService.NextQuestion(RoomId);
    }

}