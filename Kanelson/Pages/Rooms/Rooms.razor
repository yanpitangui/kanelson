@page "/rooms"
@using Kanelson.Services
@using System.Collections.Immutable
@using Kanelson.Hubs
@using Kanelson.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Kanelson.Pages.Components.CardRoom;
@inject IRoomService Service
@inject IUserService UserService
@inject NavigationManager Navigation
@inject IStringLocalizer<Shared> Loc
@inject IHttpContextAccessor HttpAccessor
@inherits ComponentBase
@implements IAsyncDisposable


@if (_rooms is null)
{
    <h2>@Loc["Loading"]...</h2>
}
else
{
    <MudText Style="text-transform: uppercase" Typo="Typo.h4">@Loc["Rooms"]</MudText>
    <div style="display: flex; gap: 20px; margin-top: 20px; flex-wrap: wrap">
        @foreach (var room in _rooms)
        {
            <CardRoomComponent
                Id="@room.Id"
                HostName="@room.Owner.Name"
                RoomName="@room.Name"
                EnterRoomClick="@(() => JoinRoom(room.Id))">
            </CardRoomComponent>
        }
    </div>

    /*<MudCard>
        <MudTable Elevation="25" Items="_rooms" T="RoomSummary">
            <ToolBarContent>
                <MudText Typo="Typo.h6">@Loc["Rooms"]</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>@Loc["Join"]</MudTh>
                <MudTh>@Loc["Id"]</MudTh>
                <MudTh>@Loc["Name"]</MudTh>
                <MudTh>@Loc["Host"]</MudTh>
                <MudTh>@Loc["Actions"]</MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudFab @onclick="@(() => JoinRoom(context.Id))"
                            Color="Color.Info" Icon="@Icons.Material.Filled.Outbound"
                            Size="Size.Small" IconSize="Size.Small"/>
                </MudTd>
                <MudTd DataLabel="@Loc["Id"]">@context.Id</MudTd>
                <MudTd DataLabel="@Loc["Name"]">@context.Name</MudTd>
                <MudTd DataLabel="@Loc["Host"]">
                    <Avatar GithubId="@context.Owner.Id"/>
                </MudTd>
                <MudTd>
                    <MudFab @onclick="@(() => DeleteRoom(@context.Id))" Color="Color.Secondary"
                            Disabled="@(UserService.CurrentUser != context.Owner.Id)"
                            Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"/>
                </MudTd>

            </RowTemplate>
        </MudTable>
    </MudCard>*/
}

@code {

    private ImmutableArray<RoomSummary>? _rooms;
    private HubConnection _hubConnection = null!;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = HttpAccessor.GetConnection(Navigation, "roomLobbyHub");


        _hubConnection.On<ImmutableArray<RoomSummary>>(RoomLobbyHub.SignalRMessages.RoomsChanged, (rooms) =>
        {
            _rooms = rooms;
            InvokeAsync(StateHasChanged);
        });

        _rooms = await Service.GetAll();
        await _hubConnection.StartAsync();
    }

    private void JoinRoom(long id)
    {
        Navigation.NavigateTo($"/room/{id}");
    }

    private async Task DeleteRoom(long id)
    {
        await Service.Delete(id);
        await InvokeAsync(StateHasChanged);
    }


    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is IAsyncDisposable disposable)
        {
            await disposable.DisposeAsync();
        }
    }

}