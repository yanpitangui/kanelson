@page "/templates"
@using System.Collections.Immutable
@using Kanelson.Domain.Rooms
@using Kanelson.Domain.Templates
@using Kanelson.Domain.Templates.Models
@inject IRoomTemplateService Service
@inject IRoomService RoomService
@inject ISnackbar SnackBar
@inject NavigationManager Navigation
@inject IStringLocalizer<Shared> Loc


@if (_templates is null)
{
    <h2>@Loc["Loading"]...</h2>
}
else
{
    <MudCard>
        <MudTable Elevation="25" Items="_templates" T="TemplateSummary" >
         <ToolBarContent>
             <MudText Typo="Typo.h6">@Loc["Templates"]</MudText>
             <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(()=>EditTemplate(null))"
                        Class="ml-auto">
                 @Loc["CreateTemplateButton"]
             </MudButton>
         </ToolBarContent>
        <HeaderContent>
            <MudTh>@Loc["Name"]</MudTh>
            <MudTh>@Loc["Edit/Delete"]</MudTh>
            <MudTh>@Loc["CreateRoom"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nome">@context.Name</MudTd>
            <MudTd DataLabel="Edit/Delete">
                <MudStack AlignItems="AlignItems.Center" Row="true" Spacing="3">
                    <MudFab @onclick="@(() => EditTemplate(@context.Id))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"/>
                    <MudFab @onclick="@(() => DeleteTemplate(@context.Id))" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"/>
                </MudStack>
            </MudTd>
            <MudTd DataLabel="CreateRoom">
                <MudFab @onclick="@(()=>CreateRoom(@context.Id, @context.Name))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.PlayArrow" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </RowTemplate>
     </MudTable>
    </MudCard>


}


@code {

    private ImmutableArray<TemplateSummary>? _templates;

    protected override async Task OnInitializedAsync()
    {
        _templates = await Service.GetTemplates();
        await base.OnInitializedAsync();
    }

    private async Task DeleteTemplate(Guid id)
    {
        Service.DeleteTemplate(id);
        _templates = await Service.GetTemplates();

    }

    private void EditTemplate(Guid? id)
    {
        Navigation.NavigateTo($"template/{id}");
    }

    private async Task CreateRoom(Guid id, string name)
    {
        await RoomService.CreateRoom(id, name);
        SnackBar.Add(Loc["RoomCreatedSuccess"], Severity.Success);
        Navigation.NavigateTo($"rooms");
    }

}