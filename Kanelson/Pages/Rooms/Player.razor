@using Microsoft.AspNetCore.SignalR.Client
@using global::Kanelson.Contracts.Models
@using System.Collections.Immutable
@using System.Net
@using Kanelson.Grains.Rooms
@using Kanelson.Hubs
@using Kanelson.Services
@using Microsoft.AspNetCore.SignalR
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpAccessor
@implements IAsyncDisposable
<h3>Player</h3>

<MudList>
    
    @foreach (var user in _connectedUsers)
    {
        <MudListItem>
            <Avatar GithubId="@user.Id"/>  <span>@user.Name</span>
        </MudListItem>
    }
</MudList>

@if (_currentQuestion is not null)
{
    <MudCard>
        <MudCardHeader>
            @_currentQuestion.Name
        </MudCardHeader>
        <MudCardContent>
            <MudList>
                @foreach (var answer in _currentQuestion.Answers)
                {
                    <MudListItem>
                        <MudButton OnClick="@(() => Answer(answer.Id))"> @answer.Description</MudButton>
                    </MudListItem>
                    <MudDivider />
                }
            </MudList>
        </MudCardContent>
    </MudCard>
}

<MudProgressCircular Color="Color.Default" Indeterminate="true" />

@code {

    TemplateQuestion? _currentQuestion;
    [Parameter]
    public string RoomId { get; set; } = null!;
    private HubConnection? _hubConnection;
    private ImmutableArray<UserInfo> _connectedUsers = ImmutableArray<UserInfo>.Empty;
    

    protected override async Task OnParametersSetAsync()
    {
        _hubConnection = HttpAccessor.GetConnection(Navigation);
        _hubConnection.On<HashSet<UserInfo>>("CurrentUsersUpdated", (users) =>
        {
            _connectedUsers = users.ToImmutableArray();
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<ImmutableArray<UserRanking>>("RoundFinished", (ranking) =>
        {
            var parameters = new DialogParameters { ["Ranking"]=ranking };

            InvokeAsync(() => DialogService.Show<RankingDialog>("Ranking", parameters));
            
            _currentQuestion = null;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<TemplateQuestion>("NextQuestion", (question) =>
        {
            _currentQuestion = question;
            InvokeAsync(StateHasChanged);
        });
        
        await _hubConnection.StartAsync();

        await _hubConnection.SendAsync("JoinRoom", RoomId);
    }

    public async Task Answer(Guid answerId)
    {
        await _hubConnection!.SendAsync("Answer", RoomId,  answerId);
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is IAsyncDisposable disposable)
        {
            await disposable.DisposeAsync();
        }
    }

}